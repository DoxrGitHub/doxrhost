// Configuration
const config = {
  PORT: 3000,                    // Port to run the server on
  ROOT_DIR: 'public',       // Root directory to serve files from
  INDEX_FILES: [],               // Files to serve instead of directory listing
};

const http=require('http'),fs=require('fs'),path=require('path'),mimeTypes={'.html':'text/html','.htm':'text/html','.css':'text/css','.js':'text/javascript','.json':'application/json','.png':'image/png','.jpg':'image/jpeg','.jpeg':'image/jpeg','.gif':'image/gif','.svg':'image/svg+xml','.ico':'image/x-icon','.txt':'text/plain','.pdf':'application/pdf','.mp3':'audio/mpeg','.mp4':'video/mp4','.webm':'video/webm','.woff':'font/woff','.woff2':'font/woff2','.ttf':'font/ttf','.otf':'font/otf'};function formatDate(e){return e.toISOString().replace(/T/,' ').replace(/\..+/,'')}function formatSize(e){const t=['B','KB','MB','GB','TB'];let i=0;for(;e>=1024&&i<t.length-1;)e/=1024,i++;return`${e.toFixed(2)} ${t[i]}`}function generateHtml(e,t){const i=path.relative(config.ROOT_DIR,e);let n=`<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><html><head><title>Index of /${i}</title></head><body><h1>Index of /${i}</h1><table><tr><th>Name</th><th>Last modified</th><th>Size</th><th>Description</th></tr><tr><th colspan="4"><hr></th></tr>`;return e!==config.ROOT_DIR&&(n+=`<tr><td><a href="../">Parent Directory</a></td><td>-</td><td>-</td><td>-</td></tr>`),t.forEach(t=>{const i=path.join(e,t),r=fs.statSync(i),o=r.isDirectory(),a=formatDate(r.mtime),s=o?'-':formatSize(r.size);n+=`<tr><td><a href="${encodeURIComponent(t)}${o?'/':''}">${t}${o?'/':''}</a></td><td>${a}</td><td>${s}</td><td></td></tr>`}),n+='<tr><th colspan="4"><hr></th></tr></table><address>doxrhost (doxr\'s file host)</address></body></html>',n}const server=http.createServer((e,t)=>{const i=new URL(e.url,`http://${e.headers.host}`),n=decodeURIComponent(i.pathname),r=path.join(config.ROOT_DIR,n);try{const i=fs.statSync(r);if(i.isDirectory()){const e=fs.readdirSync(r),i=config.INDEX_FILES.find(t=>fs.existsSync(path.join(r,t)));if(i)return fs.createReadStream(path.join(r,i)).pipe(t);{const i=generateHtml(r,e);t.writeHead(200,{'Content-Type':'text/html'}),t.end(i)}}else if(i.isFile()){const n=path.extname(r).toLowerCase(),o=mimeTypes[n]||'application/octet-stream',a=e.headers.accept||'',s=a.includes(o)||a.includes('*/*');s?t.writeHead(200,{'Content-Type':o}):t.writeHead(200,{'Content-Type':'application/octet-stream','Content-Disposition':`attachment; filename="${path.basename(r)}"`}),fs.createReadStream(r).pipe(t)}else throw new Error('Not a file or directory')}catch(e){t.writeHead(404,{'Content-Type':'text/plain'}),t.end('404 Not Found')}});server.listen(config.PORT,()=>{console.log(`Server running at http://localhost:${config.PORT}`)});
